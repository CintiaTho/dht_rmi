-Usando apenas o stub -> ObjectOutputStream e grava em um txt; e ObjectInputStream le o código do arquivo;
-Vamos fazer tudo usando um aArquivo txt local apenas para nossos testes, em uma situação "real" este arquivo seria disponibilizado para quem quer entrar na rede;
-Quando um nó entrar na rede, ele pode gravar a si próprio, e quando sair da rede, apagar a si próprio do arquivo (na situação "real", ele gravaria o antecessor e o sucessor para tentar manter a lista)  

//Faz a seguinte linha para criar o Stub e ai grava o stub no arquivo
Calculadora stub = (Calculadora)UnicastRemoteObject.exportObject(calc, 0);
//Nao fazer as duas seguintes linhas para não se perder a rede toda quando o registry cair;
Registry registry = LocateRegistry.getRegistry();
registry.bind("calculadora", stub);

-- Utilizar o:

public interface Calculadora extends Remote {
	public Numero soma (Numero a, Numero b)
		throws RemoteException;

Para fazer o protocolo como funções a serem tratadas pelos nós, ao invés de mandar uma mensagem com cabeçalho e conteúdo,
invocamos a função remota do nó e passamos como parâmetros o conteúdo que seria passado via mensagem;

-- Unico erro a ser tratado será de tentar entrar na rede (um nó da lista) e ndescobrir que eles estão desativados...até ser necessário criar uma nova rede;

----------------------------------------------------------------
		UUID uuid = UUID.randomUUID();
		String myRandom = uuid.toString();
		myRandom = "dd5e2e9e-c396-41fe-9e0c-7e7ee9b1b857";
		System.out.println("myRandom = "+myRandom);
		byte[] a = gerarHash(myRandom);
		System.out.println("a = "+a);
		System.out.println("stringHexa = "+stringHexa(a));
		System.out.println("a.toString() = "+a.toString());
		System.out.println("a.hashCode() = "+a.hashCode());
		System.out.println();
		
		uuid = UUID.randomUUID();
		myRandom = uuid.toString();
		myRandom = "37a019be-7d67-414d-90b4-600c760d8333";
		System.out.println(myRandom);
		byte[] b = gerarHash(myRandom);
		System.out.println(stringHexa(b));
		System.out.println(b.hashCode());
		
		System.out.println(a.hashCode()-b.hashCode());